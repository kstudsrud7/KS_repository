// Decompiled with JetBrains decompiler
// Type: ManipulationLibrary.Strings.Metaphone
// Assembly: TPFamilyWellness.Framework.PlugIn, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f14fc1be7d1161af
// MVID: C0DF2365-4BFC-418D-B654-2FF4D2B8EB1A
// Assembly location: C:\Users\kstudsrud\Downloads\TPBasePlugins_2024_01_18_1\PluginAssemblies\TPFamilyWellnessFrameworkPlugIn-A0924F88-EA00-EA11-A82D-000D3A1F0599\TPFamilyWellnessFrameworkPlugIn.dll

using Microsoft.Xrm.Sdk.Workflow;
using System.Activities;
using System.Collections.Generic;
using System.Text;

#nullable disable
namespace ManipulationLibrary.Strings
{
  public sealed class Metaphone : CodeActivity
  {
    private const int ComMaxLength = 6;
    private const int PreMaxLength = 3;
    private static readonly Dictionary<string, string> _commonTranslationTable;
    private static readonly Dictionary<string, string> _preTranslationTable = new Dictionary<string, string>()
    {
      {
        "ghi",
        "j"
      },
      {
        "a",
        "a"
      },
      {
        "e",
        "e"
      },
      {
        "i",
        "i"
      },
      {
        "o",
        "o"
      },
      {
        "u",
        "u"
      },
      {
        "ae",
        "e"
      },
      {
        "gn",
        "n"
      },
      {
        "kn",
        "n"
      },
      {
        "pn",
        "n"
      },
      {
        "x",
        "s"
      },
      {
        "y",
        "y"
      },
      {
        "h",
        "h"
      },
      {
        "sch",
        "sk"
      },
      {
        "slz",
        ""
      },
      {
        "sl",
        ""
      },
      {
        "wy",
        "y"
      },
      {
        "why",
        "y"
      },
      {
        "wa",
        "a"
      },
      {
        "we",
        "a"
      },
      {
        "wi",
        "i"
      },
      {
        "wo",
        "o"
      },
      {
        "wu",
        "u"
      },
      {
        "wh",
        "w"
      },
      {
        "wr",
        "r"
      }
    };

    [Default("4")]
    [Input("Maximum Length")]
    public InArgument<int> MaxLength { get; set; }

    [Default("4")]
    [Input("Minimum Length")]
    public InArgument<int> MinLength { get; set; }

    [Input("Text")]
    public InArgument<string> Text { get; set; }

    [Output("Result")]
    public OutArgument<string> Result { get; set; }

    static Metaphone()
    {
      Metaphone._commonTranslationTable = new Dictionary<string, string>()
      {
        {
          "b",
          "b"
        },
        {
          "bb",
          "b"
        },
        {
          "cq",
          "k"
        },
        {
          "cg",
          "k"
        },
        {
          "ck",
          "k"
        },
        {
          "cci",
          "x"
        },
        {
          "uccee",
          "ks"
        },
        {
          "uccess",
          "kss"
        },
        {
          "ucces",
          "kss"
        },
        {
          "cce",
          "x"
        },
        {
          "cch",
          "x"
        },
        {
          "cia",
          "x"
        },
        {
          "ci",
          "s"
        },
        {
          "mch",
          "mk"
        },
        {
          "mb",
          "m"
        },
        {
          "achl",
          "kl"
        },
        {
          "achr",
          "kr"
        },
        {
          "achn",
          "kn"
        },
        {
          "achm",
          "km"
        },
        {
          "achb",
          "kb"
        },
        {
          "achf",
          "kf"
        },
        {
          "achv",
          "kf"
        },
        {
          "achw",
          "k"
        },
        {
          "ochl",
          "kl"
        },
        {
          "ochr",
          "kr"
        },
        {
          "ochn",
          "kn"
        },
        {
          "ochm",
          "km"
        },
        {
          "ochb",
          "kb"
        },
        {
          "ochf",
          "kf"
        },
        {
          "ochv",
          "kf"
        },
        {
          "ochw",
          "k"
        },
        {
          "uchl",
          "kl"
        },
        {
          "uchr",
          "kr"
        },
        {
          "uchn",
          "kn"
        },
        {
          "uchm",
          "km"
        },
        {
          "uchb",
          "kb"
        },
        {
          "uchf",
          "kf"
        },
        {
          "uchv",
          "kf"
        },
        {
          "uchw",
          "k"
        },
        {
          "echl",
          "kl"
        },
        {
          "echr",
          "kr"
        },
        {
          "echn",
          "kn"
        },
        {
          "echm",
          "km"
        },
        {
          "echb",
          "kb"
        },
        {
          "echf",
          "kf"
        },
        {
          "echv",
          "kf"
        },
        {
          "echw",
          "k"
        },
        {
          "orches",
          "rks"
        },
        {
          "archit",
          "rkt"
        },
        {
          "orchid",
          "rkt"
        },
        {
          "chia",
          "k"
        },
        {
          "chae",
          "k"
        },
        {
          "chem",
          "k"
        },
        {
          "chym",
          "k"
        },
        {
          "chore",
          "kr"
        },
        {
          "choru",
          "kr"
        },
        {
          "charis",
          "krs"
        },
        {
          "charac",
          "krk"
        },
        {
          "cha",
          "x"
        },
        {
          "che",
          "x"
        },
        {
          "chi",
          "x"
        },
        {
          "cho",
          "x"
        },
        {
          "chu",
          "x"
        },
        {
          "ce",
          "s"
        },
        {
          "cy",
          "s"
        },
        {
          "cz",
          "z"
        },
        {
          "cc",
          "k"
        },
        {
          "c",
          "k"
        },
        {
          "dgy",
          "j"
        },
        {
          "dge",
          "j"
        },
        {
          "dgi",
          "j"
        },
        {
          "dg",
          "tk"
        },
        {
          "dt",
          "t"
        },
        {
          "dd",
          "t"
        },
        {
          "d",
          "t"
        },
        {
          "ff",
          "f"
        },
        {
          "f",
          "f"
        },
        {
          "gha",
          "k"
        },
        {
          "ghe",
          "k"
        },
        {
          "ghi",
          "k"
        },
        {
          "gho",
          "k"
        },
        {
          "ghu",
          "k"
        },
        {
          "ght",
          "t"
        },
        {
          "cough",
          "kf"
        },
        {
          "gough",
          "kf"
        },
        {
          "laugh",
          "lf"
        },
        {
          "rough",
          "rf"
        },
        {
          "tough",
          "tf"
        },
        {
          "gge",
          "j"
        },
        {
          "ggi",
          "j"
        },
        {
          "ggy",
          "j"
        },
        {
          "g",
          "k"
        },
        {
          "hour",
          "or"
        },
        {
          "heir",
          "r"
        },
        {
          "honor",
          "nr"
        },
        {
          "honest",
          "nst"
        },
        {
          "ah",
          "h"
        },
        {
          "eh",
          "h"
        },
        {
          "ih",
          "h"
        },
        {
          "oh",
          "h"
        },
        {
          "uh",
          "h"
        },
        {
          "jose",
          "js"
        },
        {
          "jj",
          "j"
        },
        {
          "j",
          "j"
        },
        {
          "kk",
          "k"
        },
        {
          "k",
          "k"
        },
        {
          "ll",
          "l"
        },
        {
          "l",
          "l"
        },
        {
          "mm",
          "m"
        },
        {
          "m",
          "m"
        },
        {
          "nn",
          "n"
        },
        {
          "n",
          "n"
        },
        {
          "ph",
          "f"
        },
        {
          "pp",
          "p"
        },
        {
          "pb",
          "p"
        },
        {
          "p",
          "p"
        },
        {
          "qq",
          "q"
        },
        {
          "q",
          "q"
        },
        {
          "rr",
          "r"
        },
        {
          "r",
          "r"
        },
        {
          "schoo",
          "sk"
        },
        {
          "schuy",
          "sk"
        },
        {
          "sched",
          "skt"
        },
        {
          "schem",
          "skm"
        },
        {
          "sch",
          "x"
        },
        {
          "sci",
          "s"
        },
        {
          "sce",
          "s"
        },
        {
          "scy",
          "s"
        },
        {
          "sc",
          "s"
        },
        {
          "sugar",
          "xkr"
        },
        {
          "sheim",
          "sm"
        },
        {
          "shoek",
          "sk"
        },
        {
          "sholm",
          "slm"
        },
        {
          "sholz",
          "slz"
        },
        {
          "isl",
          "l"
        },
        {
          "ysl",
          "l"
        },
        {
          "sz",
          "s"
        },
        {
          "ss",
          "s"
        },
        {
          "s",
          "s"
        },
        {
          "tio",
          "x"
        },
        {
          "tii",
          "x"
        },
        {
          "tih",
          "x"
        },
        {
          "tco",
          "x"
        },
        {
          "tci",
          "x"
        },
        {
          "tch",
          "x"
        },
        {
          "t",
          "t"
        },
        {
          "v",
          "f"
        },
        {
          "wr",
          "r"
        },
        {
          "wicz",
          "wts"
        },
        {
          "witz",
          "wts"
        },
        {
          "aux",
          ""
        },
        {
          "oux",
          ""
        },
        {
          "eaux",
          ""
        },
        {
          "x",
          "ks"
        },
        {
          "zh",
          "h"
        },
        {
          "zz",
          "s"
        },
        {
          "z",
          "s"
        }
      };
    }

    protected override void Execute(CodeActivityContext executionContext)
    {
      string str = Metaphone.Codify(this.Text.Get<string>((ActivityContext) executionContext), this.MinLength.Get<int>((ActivityContext) executionContext), this.MaxLength.Get<int>((ActivityContext) executionContext));
      this.Result.Set((ActivityContext) executionContext, str);
    }

    private static string Codify(string text, int min, int max)
    {
      if (string.IsNullOrEmpty(text))
        return string.Empty;
      StringBuilder stringBuilder = new StringBuilder();
      string lower = text.ToLower();
      char[] chArray = new char[1]{ ' ' };
      foreach (string str in lower.Split(chArray))
      {
        int startIndex = 0;
        for (int length = 3; length > 0; --length)
        {
          if (str.Length >= length)
          {
            string key = str.Substring(startIndex, length);
            if (Metaphone._preTranslationTable.ContainsKey(key))
            {
              stringBuilder.Append(Metaphone._preTranslationTable[key]);
              startIndex += key.Length - 1;
            }
          }
        }
        for (int length1 = str.Length; startIndex < length1; ++startIndex)
        {
          for (int length2 = 6; length2 > 0; --length2)
          {
            if (str.Length - startIndex >= length2)
            {
              string key = str.Substring(startIndex, length2);
              if (Metaphone._commonTranslationTable.ContainsKey(key))
              {
                stringBuilder.Append(Metaphone._commonTranslationTable[key]);
                startIndex += key.Length - 1;
              }
            }
          }
          if (stringBuilder.Length >= max)
            break;
        }
      }
      while (stringBuilder.Length < min)
        stringBuilder.Append('0');
      if (stringBuilder.Length > max && max != 0)
        stringBuilder.Remove(max, stringBuilder.Length - max);
      return stringBuilder.ToString().ToUpper();
    }
  }
}
